package empprofile;

import com.sun.org.apache.bcel.internal.Constants;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamWriter;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

/**
 * ProfileBySAX uses a ContentHandler to write the profile to an XML File. The
 * ContantHandler is passed to objects of inner classes that extend from
 * DefaulHandler. These classes write elements and attributes to the
 * ContentHandler as events are generated by the SAX parser.
 *
 */
public class SAXParser {

    private static String readFile(String file) {
        try {
            BufferedReader reader = new BufferedReader(new FileReader(file));
            String line = null;
            StringBuilder stringBuilder = new StringBuilder();
            String ls = System.getProperty("line.separator");

            while ((line = reader.readLine()) != null) {
                stringBuilder.append(line);
                stringBuilder.append(ls);
            }
            return stringBuilder.toString();
        } catch (Exception e) {
        }
        return null;
    }

    public static void main(String[] args) throws XMLStreamException, FileNotFoundException {

        String xmlToWrite = Constants.xmlToWrite;
        String xmlToParse = "cv.xml";
        String xmlPrefixLocation = "xml/hw1/";

        // Read helper XMLS and store them to Strings.
        Map<String, String> xmlsToRead = new HashMap<>();
        List<String> xmlsToParse = new ArrayList<>();
        xmlsToParse.add("transcript.xml");
        xmlsToParse.add("empRecord.xml");
        xmlsToParse.add("companyInfo.xml");
        for (String currXML : xmlsToParse) {
            xmlsToRead.put(currXML, readFile(xmlPrefixLocation + currXML));
        }

        XMLStreamWriter out = null;
        try {
            // Create Parser
            SAXParserFactory saxpf = SAXParserFactory.newInstance();
            SAXParser saxp = saxpf.newSAXParser();

            //saxp.setProperty("http://xml.org/sax/features/validation", true);
            // Ensure namespace processing is on (the default)
            //saxp.setProperty("http://xml.org/sax/features/namespaces", true);

            OutputStream outputStream = new FileOutputStream(new File(xmlToWrite));

            out = XMLOutputFactory.newInstance().createXMLStreamWriter(
                    new OutputStreamWriter(outputStream, "utf-8"));
            try {
                out.writeStartDocument("utf-8", "1.0");
            } catch (XMLStreamException ex) {
                ex.printStackTrace();
            }
            saxp.parse(xmlPrefixLocation + xmlToParse, new SAXParser.SParser(out, true, xmlsToRead));

            try {
                out.writeEndDocument();

            } catch (XMLStreamException ex) {
                ex.printStackTrace();
            }



            System.out.println("Finished!");
        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            out.flush();
            out.close();
        }

        String toFix = readFile(xmlToWrite);
        toFix = toFix.replace("&lt;", "<");
        toFix = toFix.replaceAll("&gt;", ">");

        //Write to file
        PrintWriter outFile = new PrintWriter(xmlPrefixLocation + "profileSAX.xml");
        outFile.print(toFix);
        outFile.flush();
        outFile.close();
    }

    static class SParser extends DefaultHandler {

        static String shorcvCompanyId = "";
        XMLStreamWriter xmlout = null;
        boolean isProfile = false;
        List<String> attrsToIgnore = new ArrayList<>();
        Map<String, String> xmlsToRead = null;
        String parsedXML;

        public SParser(XMLStreamWriter out, boolean isProfile, Map<String, String> xmlsToRead) {
            this.isProfile = isProfile;
            this.xmlout = out;
            this.xmlsToRead = xmlsToRead;
            attrsToIgnore.add("acv:cv_info");
            if (isProfile) {
                try {
                    out.writeCharacters("\n");
                    out.writeStartElement("app:profile");
                    out.writeAttribute("xmlns:app", "http://www.yummycode.com/ns/profile");
                    out.writeAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
                    out.writeAttribute("xsi:schemaLocation", "http://www.yummycode.com/ns/profile profile.xsd");
                    out.writeCharacters("\n");
                } catch (XMLStreamException ex) {
                    ex.printStackTrace();
                }
            }
        }

        @Override
        public void startElement(String arg0, String arg1, String arg2, Attributes arg3) throws SAXException {
            //System.out.println("startElement2:<" + arg2 + ">");
            if (isProfile) {
                if (arg2 != null && !arg2.equals("") && arg2.equals("acv:company")) {
                    String companyId = null;
                    String experienceId = null;
                    try {

                        companyId = arg3.getValue(0);
                        experienceId = arg3.getValue(1);
                        //Tokenize xml to get elements.
                        int beginIndex = xmlsToRead.get("companies.xml").indexOf("<ci:company id=\"" + companyId + "\">");
                        xmlout.writeStartElement("up:" + arg2.split(":")[1]);
                        xmlout.writeAttribute(arg3.getLocalName(0), arg3.getValue(0));
                        if (beginIndex > 0) {

                            int endIndex = xmlsToRead.get("companies.xml").indexOf("</ci:company>", beginIndex);
                            String tmp = "<ci:company id=\"" + companyId + "\">";
                            String elementToWrite = xmlsToRead.get("companies.xml").substring(beginIndex + tmp.length(), endIndex);

                            //System.out.println("el1: "+elementToWrite+"\n=======================");
                            String tmp2 = elementToWrite.replace("ci:", "up:");
                            xmlout.writeCharacters(tmp2);
                        }
                        beginIndex = xmlsToRead.get("employmentrecord.xml").indexOf("<er:experience id=\"" + experienceId + "\">");
                        if (beginIndex > 0) {

                            int endIndex = xmlsToRead.get("employmentrecord.xml").indexOf("</er:experience>",beginIndex);
                            String tmp = "<er:experience  id=\"" + experienceId + "\">";
                            String elementToWrite = xmlsToRead.get("employmentrecord.xml").substring(beginIndex + tmp.length(), endIndex);

                            //System.out.println("el2: "+elementToWrite+"\n=======================");
                            String tmp2 = elementToWrite.replace("er:", "up:");

                            xmlout.writeCharacters(tmp2);
                        }
                    } catch (XMLStreamException ex) {
                        ex.printStackTrace();
                    }
                } else if (arg2 != null && !arg2.equals("") && arg2.equals("acv:school")) {
                    String transcriptId = null;

                    try {
                        xmlout.writeStartElement("up:" + arg2.split(":")[1]);
                        xmlout.writeAttribute(arg3.getLocalName(0), arg3.getValue(0));

                        transcriptId = arg3.getValue(1);
                        //Tokenize xml to get elements.
                        int beginIndex = xmlsToRead.get("transcript.xml").indexOf("<tr:transcript id=\"" + transcriptId + "\">");
                        if (beginIndex > 0) {
                            int endIndex = xmlsToRead.get("transcript.xml").indexOf("</tr:transcript>", beginIndex);
                            String tmp = "<tr:transcript id=\"" + transcriptId + "\">";
                            String elementToWrite = xmlsToRead.get("transcript.xml").substring(beginIndex + tmp.length(), endIndex);

                            //System.out.println("el3: "+elementToWrite+"\n=======================");
                            String tmp2 = elementToWrite.replace("tr:", "up:");
                            xmlout.writeCharacters(tmp2);
                        }

                    } catch (XMLStreamException ex) {
                        ex.printStackTrace();
                    }
                } else if (!attrsToIgnore.contains(arg2)) {
                    try {
                        xmlout.writeStartElement("up:" + arg2.split(":")[1]);
                        for (int i = 0; i < arg3.getLength(); i++) {
                            xmlout.writeAttribute(arg3.getLocalName(i), arg3.getValue(i));
                        }
                    } catch (XMLStreamException ex) {
                        ex.printStackTrace();
                    }
                }


            }
        }

        @Override
        public void characters(char[] arg0, int arg1, int arg2) throws SAXException {
            //System.out.println("characters: " + new String(arg0, arg1, arg2) + " ");
            if (isProfile) {
                try {
                    xmlout.writeCharacters(new String(arg0, arg1, arg2));
                } catch (XMLStreamException ex) {
                    ex.printStackTrace();
                }
            }
        }

        @Override
        public void endElement(String arg0, String arg1, String arg2) throws SAXException {
            //System.out.println("endElement:<" + arg2 + ">");
            if (isProfile) {
                try {
                    xmlout.writeEndElement();

                } catch (XMLStreamException ex) {
                    ex.printStackTrace();
                }
            }
        }

        @Override
        public void startDocument() throws SAXException {
            //System.out.println("<startDocument>");
        }

        @Override
        public void endDocument() throws SAXException {
            //System.out.println("<endDocument>");
        }
    }
}
